Lyte.Component.register("crux-color-palette",{_template:'<template tag-name="crux-color-palette"> <span class="cxColorDropperOuter" data-zcqa="colorPaletteOpen" onclick="{{action(\'openPalette\',this)}}"> <span class="cxColorDropperCircle dIB cxVam {{concat(\'cx\',cruxReplace(cxPropSelectedColor,\'#\',\'\'))}}" id="cxPaletteOpener_{{cxPropId}}" style="{{if(ifEquals(cxPropSelectedColor,\'noFill\'),\'border:1px solid #adadad;\',concat(\'background-color : \',cxPropSelectedColor))}};"></span> <span class="cxPaletteDropArrow"></span> </span> <lyte-popover lt-prop-placement="bottom top" lt-prop-freeze="false" lt-prop-scrollable="true" lt-prop-content-padding="0px" lt-prop-auto-align="{{cxPropAutoAlignPopover}}" lt-prop-show-close-button="false" lt-prop-show="{{lbind(cxPropShow)}}" lt-prop-wrapper-class="cxPaletteWrapper {{cxPropWrapperClass}}" on-before-close="{{method(\'popoverBeforeClose\')}}" on-close="{{method(\'popoverClose\')}}" lt-prop-origin-elem="#cxPaletteOpener_{{cxPropId}}" lt-prop-width="{{cxPropPopoverWidth}}"> <template is="registerYield" yield-name="popover"> <lyte-popover-content class="cxPalettePopoverContent"> <div id="predefinedColorContainer"> <template is="if" value="{{cxPropShowText}}"><template case="true"> <div class=" aligncenter cxPaletteSampleTextContainerParent"> <span class="cxPaletteSampleTextContainer cxPaletteSampleTextContainerContent dIB f13 {{if(ifEquals(cxPropSelectedColor,\'noFill\'),\'cxPaletteSampleNofill\',\'\')}}" style="background-color: {{bgColor}}; color : {{clr}}">{{cruxGetI18n(\'crm.picklist.sample.text\')}}</span> </div> </template></template> <template is="if" value="{{expHandlers(expHandlers(showColorPicker,\'!\'),\'&amp;&amp;\',expHandlers(cxPropAlwaysShowColorPicker,\'!\'))}}"><template case="true"> <div class=" cxColorClearFix cxColorPalette"> <template is="if" value="{{cxPropNoFill}}"><template case="true"> <span class="cxPaletteCircle cxnoFill fL {{if(expHandlers(\'noFill\',\'==\',cxPropSelectedColor),\'cxPaletteSelected\',\'\')}}" data-zcqa="noFillColor" onclick="{{action(\'selectedColor\',\'noFill\')}}"></span> </template></template> <template is="for" items="{{defaultColors}}" item="item" index="index"> <span class="cxPaletteCircle fL {{if(expHandlers(item,\'==\',cxPropSelectedColor),\'cxPaletteSelected selectedColor_picklist\',\'\')}} {{concat(\'cx\',cruxReplace(item,\'#\',\'\'))}}" data-zcqa="color{{cruxReplace(item,\'#\',\'\')}}" onclick="{{action(\'selectedColor\',item)}}" style="background-color : {{item}};"></span> </template> </div> <template is="if" value="{{cxPropMoreColorButton}}"><template case="true"> <div class="cxPaletteMoreColorsBtn cxAlignCenter p10 cP bdrTe6e6e6" data-zcqa="cp_addNewColor" id="addNewColor" onclick="{{action(\'showColorpicker\')}}"> <span class="dIB cxVam mR5 cxPaletteColorPickerIcon"></span> <span class=" cxPaletteColorPickerIconColor dIB cxVam">{{cruxGetI18n(\'crm.more.colors\')}}</span> </div> </template></template>  </template><template case="false"> <div id="cxLytePickerWrapper"> <lyte-colorpicker lt-prop-show="true" lt-prop-basic-color-picker="false" lt-prop-selected-color="{{cxPropSelectedColor}}" lt-prop="{&quot;boardColor&quot;:&quot;{{boardColor}}&quot;, &quot;inline&quot; : true}" on-open="{{method(\'addQA\')}}" on-change="{{method(\'colorChanged\')}}" lt-prop-freeze="true" id="colorpicker_dropper" class="cxPaletteColorPicker"></lyte-colorpicker> </div> <div class=" cxPaletteProceedBtns clearFix cxColorClearFix"> <lyte-button lt-prop-appearance="default" lt-prop-size="small" class="fL mR0" onclick="{{action(\'showPredefinedColors\')}}"> <template is="registerYield" yield-name="text"> {{cruxGetI18n(\'crm.button.back.alone\')}} </template> </lyte-button> <lyte-button lt-prop-appearance="primary" class="fR mR0" lt-prop-size="small" onclick="{{action(\'setCustomcolor\')}}"> <template is="registerYield" yield-name="text"> {{cruxGetI18n(\'Done\')}} </template> </lyte-button> </div> </template></template>  </div></lyte-popover-content></template> </lyte-popover> </template>',_dynamicNodes:[{type:"attr",position:[1]},{type:"attr",position:[1,1],attr:{style:{name:"style",helperInfo:{name:"concat",args:["''",{type:"helper",value:{name:"if",args:[{type:"helper",value:{name:"ifEquals",args:["cxPropSelectedColor","'noFill'"]}},"'border:1px solid #adadad;'",{type:"helper",value:{name:"concat",args:["'background-color : '","cxPropSelectedColor"]}}]}},"';'"]}}}},{type:"attr",position:[3]},{type:"registerYield",position:[3,1],dynamicNodes:[{type:"attr",position:[1,1,1]},{type:"if",position:[1,1,1],cases:{true:{dynamicNodes:[{type:"attr",position:[1,1],attr:{style:{name:"style",helperInfo:{name:"concat",args:["'background-color: '","bgColor","'; color : '","clr"]}}}},{type:"text",position:[1,1,0]}]}},default:{}},{type:"attr",position:[1,1,3]},{type:"if",position:[1,1,3],cases:{true:{dynamicNodes:[{type:"attr",position:[1,1]},{type:"if",position:[1,1],cases:{true:{dynamicNodes:[{type:"attr",position:[1]}]}},default:{}},{type:"attr",position:[1,3]},{type:"for",position:[1,3],dynamicNodes:[{type:"attr",position:[1],attr:{style:{name:"style",helperInfo:{name:"concat",args:["'background-color : '","item","';'"]}}}}]},{type:"attr",position:[3]},{type:"if",position:[3],cases:{true:{dynamicNodes:[{type:"attr",position:[1]},{type:"text",position:[1,3,0]}]}},default:{}}]},false:{dynamicNodes:[{type:"attr",position:[1,1]},{type:"componentDynamic",position:[1,1]},{type:"attr",position:[3,1]},{type:"registerYield",position:[3,1,1],dynamicNodes:[{type:"text",position:[1]}]},{type:"componentDynamic",position:[3,1]},{type:"attr",position:[3,3]},{type:"registerYield",position:[3,3,1],dynamicNodes:[{type:"text",position:[1]}]},{type:"componentDynamic",position:[3,3]}]}},default:{}},{type:"componentDynamic",position:[1]}]},{type:"componentDynamic",position:[3]}],_observedAttributes:["cxPropNoFill","cxPropDefaultColors","cxPropMoreColorButton","cxPropSelectedColor","cxPaletteOpen","cxPropAutoAlignPopover","showColorPicker","boardColor","cxPropShowText","bgColor","cxPropAddCustomColorsToPalette","cxPropShow","cxPropWrapperClass","defaultColors","cxPropPopoverWidth","cxPropId","cxPropAlwaysShowColorPicker"],data:function(){return{cxPropNoFill:Lyte.attr("boolean",{default:!0}),cxPropDefaultColors:Lyte.attr("array",{default:["#F17574","#F48435","#E7A826","#A8C026","#63C57E","#1DB9B4","#57B1FD","#879BFC","#D297EE","#FD87BD","#969696","#658BA8","#B88562"]}),cxPropMoreColorButton:Lyte.attr("boolean",{default:!0}),cxPropSelectedColor:Lyte.attr("string",{default:"noFill"}),cxPaletteOpen:Lyte.attr("boolean",{default:!1}),cxPropAutoAlignPopover:Lyte.attr("boolean",{default:!0}),showColorPicker:Lyte.attr("boolean",{default:!1}),boardColor:Lyte.attr("string",{default:"ff0000"}),cxPropShowText:Lyte.attr("boolean",{default:!0}),bgColor:Lyte.attr("string"),cxPropAddCustomColorsToPalette:Lyte.attr("boolean",{default:!1}),cxPropShow:Lyte.attr("boolean",{default:!1}),cxPropWrapperClass:Lyte.attr("string",{default:""}),defaultColors:Lyte.attr("array"),cxPropPopoverWidth:Lyte.attr("string",{default:"240px"}),cxPropId:Lyte.attr("string"),cxPropAlwaysShowColorPicker:Lyte.attr("boolean",{default:!1})}},init:function(){this.$node.closePalette=function(){this.component.setData("cxPaletteOpen",!1);var e=this.querySelector("lyte-popover");e.ltProp("duration",void 0),e.ltProp("show",!1),e.ltProp("duration",400)},this.$node.alignColorPalette=function(){this.querySelector("lyte-popover").alignPopover()},this.$node.resetColorPalette=function(){this.setData("defaultColors",this.component.data.cxPropDefaultColors.slice(0))},this.customColorLen=0,this.$node.resetColorPalette()},actions:{selectedColor:function(e){this.getMethods("onSelectColor")&&this.executeMethod("onSelectColor",e),this.setData("cxPropSelectedColor",e);var t=!0;this.getMethods("onBeforeColorPaletteHide")&&(t=0!=(t=this.executeMethod("onBeforeColorPaletteHide",this.data.cxPropId))),t&&this.$node.querySelector("lyte-popover").ltProp("show",!1)},openPalette:function(e){this.data.cxPaletteOpen&&setTimeout(function(){this.$node.querySelector("lyte-popover").ltProp("show",!1)}.bind(this),10);var t=!0;this.getMethods("onBeforeColorPalleteOpen")&&(t=this.executeMethod("onBeforeColorPalleteOpen",this.data.cxPropId)),t&&(this.data.cxPropShowText&&("noFill"!=this.data.cxPropSelectedColor?this.setData({bgColor:this.getRgbFromHex(this.data.cxPropSelectedColor),clr:this.getPicklistFontColor(this.data.cxPropSelectedColor)}):this.setData({bgColor:"transparent",clr:"black"})),this.$node.querySelector("lyte-popover").ltProp("show",!0),e.classList.add("cxPalleteOpened"),this.setData("cxPaletteOpen",!0),this.setData("showColorPicker",!1),this.getMethods("onColorPaletteOpen")&&this.executeMethod("onColorPaletteOpen",this.data.cxPropId),this.highlightSelectedColor(),this.setData("cxPropShow",!0))},showColorpicker:function(){var e;e="noFill"!=this.data.cxPropSelected&&this.data.cxPropSelectedColor?this.data.cxPropSelectedColor:"#ffffff",this.setData("boardColor",this.getHexFromRgb(e)),this.setData("showColorPicker",!0),this.tempColor=this.data.cxPropSelectedColor},setCustomcolor:function(){this.getMethods("onSelectColor")&&this.executeMethod("onSelectColor",this.tempColor.hex?this.tempColor.hex:this.tempColor),this.setData("cxPropSelectedColor",this.tempColor.hex?this.tempColor.hex:this.tempColor),"noFill"!=this.tempColor&&this.data.cxPropAddCustomColorsToPalette&&this.customColorLen<10&&-1==this.data.defaultColors.indexOf(this.tempColor.hex?this.tempColor.hex:this.tempColor)&&(Lyte.arrayUtils(this.data.defaultColors,"push",this.tempColor.hex?this.tempColor.hex:this.tempColor),this.customColorLen++),this.setData("cxPaletteOpen",!1),this.setData("cxPropShow",!1),setTimeout(function(){this.setData("showColorPicker",!1)}.bind(this),10)},showPredefinedColors:function(){this.setData("showColorPicker",!1),this.executeMethod("colorChanged",void 0,this.data.cxPropSelectedColor),this.highlightSelectedColor()}},methods:{popoverClose:function(e,t){var o=this.$node.querySelector(".cxPalleteOpened");o&&o.classList.remove("cxPalleteOpened"),t.setData("ltPropBindToBody",!1),this.setData("cxPaletteOpen",!1),this.getMethods("onColorPaletteHide")&&this.executeMethod("onColorPaletteHide",this.data.cxPropId,e)},popoverBeforeClose:function(e){if(this.getMethods("onBeforeColorPaletteHide"))return this.executeMethod("onBeforeColorPaletteHide",this.data.cxPropId,e)},addQA:function(){$L("#lyteCPShowValue").find("input")[0].setAttribute("data-zcqa","cp_hashcode"),$L("#lyteCP__A").find("input")[0].setAttribute("data-zcqa","cp_alpha"),$L(".previewDiv")[0].setAttribute("data-zcqa","cp_preview")},colorChanged:function(e,t){this.setData({bgColor:this.getRgbFromHex(t.hex?t.hex:t),clr:this.getPicklistFontColor(t.hex?t.hex:t)}),this.tempColor=t}},getPicklistFontColor:function(e){return Lyte.Component.registeredHelpers.cruxGetPicklistFontColor(e)},highlightSelectedColor:function(){"black"==this.getPicklistFontColor(this.data.cxPropSelectedColor)?$L(".cxPaletteSelected",this.$node).addClass("customColorSelectedDark"):$L(".cxPaletteSelected",this.$node).removeClass("customColorSelectedDark")},getRgbFromHex:function(e){if("noFill"==e)return"transparent";null==e&&(e="ffffff");var t=e.replace(/\s/g,"").match(/^rgba?\((\d+),(\d+),(\d+)/i);return t&&4===t.length?("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2):e},getHexFromRgb:function(e){if("noFill"==e)return"#ffffff";if(void 0!==e){if(e.startsWith("rgba"))return Events.rgbatohexa(e);if(-1===e.search("rgb"))return e;{function t(e){return("0"+parseInt(e).toString(16)).slice(-2)}return"#"+t((e=e.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/))[1])+t(e[2])+t(e[3])}}}});
