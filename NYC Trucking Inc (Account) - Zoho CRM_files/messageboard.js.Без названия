/*$Id$*/
class HttpCall
{
/** Extremely Important **/
/** Please refrain from using async = false. **/ 
/** Executing http calls syncronously will cause the entire page to freeze. **/

	constructor(http_method, path, headers, params, async, domain)
	{
		this.xhr = new XMLHttpRequest();
		this.http_method = http_method;
		this.domain = domain;
		this.path = this.setPath(path);
		this.headers = headers;
		this.params = params;
		this.async = async;
		this.isMicsE=false;
	}

	setRequestBody(body) // body must be in string. We dont support FormData(), blob etc
 	{
		this.body = body;
	}
	setPath(path){
		return this.domain ?
				this.domain + path :
				sessionStorage.isbrandeddomain ?
						location.protocol + '//' + location.host + '/micse' + path  :
						location.protocol + '//' + location.host + path;
		// Checking the type of domain to make request respectively.
	}   
	setStaticPath(path)
       {
                this.path = path;
       }
	makeHttpRequest(onresponsecallback, onerrorcallback)
	{
		var queryparam="";	
		for (let key of this.params.keys())
		{		
			queryparam+= (queryparam == "")?  (key +"="+encodeURIComponent(this.params.get(key))) : ("&"+key +"="+encodeURIComponent(this.params.get(key))) ;
		}
                this.xhr.open(this.http_method, (queryparam == "")? (this.path) : (this.path+"?"+queryparam), this.async);
		for (let key of this.headers.keys())
		{
			this.xhr.setRequestHeader(key, this.headers.get(key));
		}

		this.xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

		if(this.http_method == "post" || this.http_method=="Post" || this.http_method =="POST")
		{       

                        var csrfToken =this.getCSRFTokenFromCookie();   
                        var csrfParam ="iamcsrcoo";
                    
						
						var orgid=this.getOrgId();
                        var forMicsE=this.getForMicsE();

			if(this.body == undefined)
			{
				this.body= "";
			}
			if(this.isMicsE==true){
			this.body+= (this.body== "")? (csrfParam+"="+csrfToken+"&orgid="+orgid+"&forMicsE="+forMicsE) : ("&"+csrfParam+"="+csrfToken+"&orgid="+orgid+"&forMicsE="+forMicsE);
			}
			else{
				this.body+= (this.body== "")? (csrfParam+"="+csrfToken) : ("&"+csrfParam+"="+csrfToken);	
			}

		}
		this.xhr.onload = function() {onresponsecallback(this);}
		this.xhr.onerror = function() {onerrorcallback(this);}
		if(this.body == undefined)
		{
			this.xhr.send();
		}
		else
		{
			this.xhr.send(this.body);
		}
	}

        getCSRFTokenFromCookie() {
                var ca = document.cookie.split(';');
                var csr={}
                for (var i = 0; i < ca.length; i++) {
                        var c = ca[i].trim();
                        c=c.split('=');
                        csr[c[0]]=c[1]
                }
                return csr.iamcsr;
        }
        
        getOrgId(){
              var orgid=sessionStorage.getItem("orgid");
			  if(orgid==null){
				return -1
			  }
			  else{
              return orgid;
			  }
        }
        
        getForMicsE(){
              var forMicsE=sessionStorage.getItem("forMicsE");
			  if(forMicsE==null){
				return false
			  }
              return forMicsE;
        }
         
	forMicsE(boolean){
              if(boolean==true){
                  this.isMicsE=true;
			  }
			  else{
				  this.isMicsE=false;
			  }
		}

}

//$Id$
var combobox = {
  template: `<div :style='{"background-color":styleObject.selectBox.backgroundColor}'
          style="padding: 16px 0px; margin:0px 16px"
      >
      <div class="optionmsgRoot">
      <label id="inlabel" :col='col' :labeltrans="(usersearch==''&&selectedcopy.length==0&&col=='black'&&labelshow)?'low':'high'" @click="selectedcopy.length==0?$refs.searchInput.focus():null" :style='{"color":styleObject.selectBox.placeHolder.color,"font-size":styleObject.selectBox.placeHolder.fontSize, "font-family":styleObject.selectBox.placeHolder.fontFamily, "font-weight":styleObject.selectBox.placeHolder.fontWeight}'>{{styleObject.selectBox.placeHolder.text}}</label>
      <div class="chipinputsend">
        <div class="chipinput">
          <div id="selectedoption" v-if="selectedcopy.length" >
            <div class="chip" :style='{"background-color":styleObject.selectBox.selection.backgroundColor}'>
            <span :title="selectedcopy" :style='{"color":styleObject.selectBox.selection.color,"font-size":styleObject.selectBox.selection.fontSize+" !important", "font-family":styleObject.selectBox.selection.fontFamily, "font-weight":styleObject.selectBox.selection.fontWeight}'>{{selectedcopy}}</span>
            <i class="material-icons" id="chipclose" @click="chipremover()"
              >close</i
            >
            </div>
          </div>
          <input 
          type="text"
          spellcheck="false"
          id="search"
          v-model="usersearch"
          autocomplete="off"
          ref="searchInput"
          @focus="focuscol()"
          @focusout="col='black'"
          />
        </div>
        <span
          class="material-icons"
          id="arrow"
          :col="col"
          @click="col=='black'||col=='red'?$refs.searchInput.focus():null"
          :style='{"color":styleObject.sendButton.iconColor}'
          >arrow_drop_down</span
        >
        <span class="material-icons" id="send" @click="data.selectedOption=selectedcopy,selectedcopy!=='' ? $emit('sendclicked',data) : col='red',usersearch=''" :style='{"color":styleObject.sendButton.iconColor}'>{{styleObject.sendButton.icon}}</span>
      </div>
      <div id="line" :col="col"></div>
      <div class="valueList" :col="col" >
        <div
          class="valueListItem"
          v-for="(item,index) in option"
          @click="selectionchange(item),col='black'"
          :key="index"
          :style='{"color":styleObject.selectBox.selection.color,"font-size":styleObject.selectBox.selection.fontSize+" !important", "font-family":styleObject.selectBox.selection.fontFamily, "font-weight":styleObject.selectBox.selection.fontWeight}'
  
        >
          <div class="listItem" :value="item" :style='{"color":styleObject.selectBox.item.color,"font-size":styleObject.selectBox.item.fontSize+" !important", "font-family":styleObject.selectBox.item.fontFamily,  "font-weight":styleObject.selectBox.item.fontWeight}'>
          <span id="listDispname">{{item}}</span>
      </div>
        </div>
      </div>
    </div>
        </div>`,
  props: ["data", "styleObject"],
  data: function () {
    return {
      options: [],
      selectedcopy: "",
      usersearch: "",
      col: "black",
      labeltrans: "low",
      labelshow: true
    };
  },
  watch:{
  data(){
       this.optionchanges()
	}
  },
  created() {
       this.optionchanges()
  },
  computed: {
    option: function () {
      var handle = this;
      let list = this.options.filter((item) => {
        return item.toLowerCase().search(handle.usersearch.toLowerCase()) > -1
          ? true
          : false;
      });
      return list;
    }
  },
  methods: {
    optionchanges:function(){
    this.options = this.data.options.split(",");
    this.selectedcopy = this.options[0];
    },
    chipremover: function () {
      this.selectedcopy = "";
      this.labelshow = true;
    },
    selectionchange: function (val) {
      this.selectedcopy = val;
      this.labelshow = true;
      this.usersearch='';
    },
    focuscol: function () {
      this.col = "blue";
      this.labelshow = false;
    }
  }
};
//$Id$
var standard_templates = {
  template:`<div
class="StandardmessageContainer MessageTemplate"
@click="$emit('clicked',data)"
style="
background-color: white;
font-family: 'Roboto',sans-serif;
font-weight: 400;
position:relative;
border: 0px solid rgb(218, 218, 218) !important;
border-radius: 5px;
cursor: pointer;
margin: 15px;
width: calc(100vw - 30px);
overflow-wrap: break-word;
"
:style='{"background-color":getBackgroundColor(),"border":styleObject.background.border + " !important"}'
@mouseover="hover = true "
@mouseleave="hover = false "
><div
class="StandardmessageHeader"
style="
  color: #757575;
  font-weight: 400;
  font-size: 12px;
  font-family: 'Roboto',sans-serif;
  display: inline-flex;
  min-width: 100%;
  align-items: center;
  padding: 8px 16px;
  justify-content: space-between;
  word-break: break-word;
"
><span
style="
color: #757575;
font-weight: 400;
font-size: 12px;
font-family: 'Roboto',sans-serif;"
    :style='{"color":styleObject.heading.color,"font-size":styleObject.heading.fontSize+" !important", "font-family":styleObject.heading.fontFamily, "font-weight":styleObject.heading.fontWeight, "max-width":headingWidth}'
    v-text="data.heading"
  ></span
  ><span
  style="
  color: #757575;
  font-weight: 400;
  font-size: 12px;
  font-family: 'Roboto',sans-serif;"
    :style='{"color":styleObject.sideHeading.color,"font-size":styleObject.sideHeading.fontSize+" !important", "font-family":styleObject.sideHeading.fontFamily, "font-weight":styleObject.sideHeading.fontWeight,"min-width":sideHeadingWidth}'
    v-text="data.date"
  ></span></div
><div
class="StandardmessageDescription"
style="
  color: rgb(0, 0, 0);
  font-size: 16px !important;
  font-family: Roboto;
  font-weight: 400;
  padding: 4px 16px;
"
  :style='{"color":styleObject.description.color,"font-size":styleObject.description.fontSize+" !important", "font-family":styleObject.description.fontFamily, "font-weight":styleObject.description.fontWeight}'
  v-text="data.desc"
>
</div
><div class="StandardmessageCategory" style="
padding: 8px 16px;
display: flex;
width: fit-content;
color: #757575;
font-weight: 400;
font-size: 12px;
font-family: 'Roboto',sans-serif;"
>
  <div class="StandardmessageGenre" v-if="!rendergenrestyles">
    <span
    style="
      color: #757575;
      font-weight: 400;
      font-size: 12px;
      font-family: 'Roboto',sans-serif;"
      :style='{"color":styleObject.category.color,"font-size":styleObject.category.fontSize+" !important", "font-family":styleObject.category.fontFamily,  "font-weight":styleObject.category.fontWeight}'
      v-text="data.categoryText"
    ></span>
  </div>
  <div
    class="StandardmessageGenre"
    v-else-if="rendergenrestyles"
    :style='{"background":genrestyles.backgroundColor,"padding":genrestyles.padding, "border-radius":genrestyles.borderRadius,  "border":genrestyles.border}'
  >
    <span
    style="
      color: #757575;
      font-weight: 400;
      font-size: 12px;
      font-family: 'Roboto',sans-serif;"
      :style='{"color":genrestyles.color,"font-size":genrestyles.fontSize+" !important", "font-family":genrestyles.fontFamily,  "font-weight":genrestyles.fontWeight}'
      v-text="data.categoryText"
    ></span>
  </div> </div
><span class="Ripple" >
    <span class="Rip" style="width: 592px; height: 592px; transform: translate(-51px, -213.594px) scale3d(1, 1, 1);" ></span>
  </span></div
>`,
  props:["data","styles","genrestyles","rendergenrestyles","showmessagehover"],
  created() {
    if(this.data.ctaType=='walkthrough'){
      this.getWalkthroughData()
    }
    
   
  },
          data:function(){
              return {
          styleObject:this.styleInit(),
          headingWidth:this.getHeadingWidth(),
          sideHeadingWidth:this.getSideHeadingWidth(),
          hover : false
              }
          },
          methods:{
              styleInit:function(){
                      return this.styles;
              },
              getWalkthroughData(){
                this.$emit('loadwalkthroughflow', this.data.cta);
                  },
      getHeadingWidth:function(){
          if(this.data.date.length > 0)
          {
              return "80%";
          }
          else
          {
              return "100%";
          }
          return "80%";
      },
      getSideHeadingWidth:function(){
          if(this.data.date.length > 0)
                      {
                              return "20%";
                      }
                      else
                      {
                              return "0%";
                      }
                      return "20%";
      },
      getBackgroundColor:function(){
                       if(this.showmessagehover && this.hover )
                        {
                 return this.styleObject.hover.hoverColor;
             }
                      else
                      {
                                return this.styleObject.background.backgroundColor;
                      }
              }
          }
};


//$Id$
var walkthrough_default = {
template:`<div
class="StandardmessageContainer MessageTemplate"
@click="$emit('start-tour',data)"
style="
  background-color: white;
  font-family: 'Roboto',sans-serif;
  font-weight: 400;
  position:relative;
  border: 0px solid rgb(218, 218, 218) !important;
  border-radius: 5px;
  cursor: pointer;
  margin: 15px;
  width: calc(100vw - 30px);
  overflow-wrap: break-word;
"
  :style='{"background-color":getBackgroundColor(),"border":styleObject.background.border + " !important"}'
  @mouseover="hover = true "
  @mouseleave="hover = false "
  ><div
  class="StandardmessageHeader"
  style="
    color: #757575;
    font-weight: 400;
    font-size: 12px;
    font-family: 'Roboto',sans-serif;
    display: inline-flex;
    min-width: 100%;
    align-items: center;
    padding: 8px 16px;
    justify-content: space-between;
    word-break: break-word;
  "
><span
style="
color: #757575;
font-weight: 400;
font-size: 12px;
font-family: 'Roboto',sans-serif;"
      :style='{"color":styleObject.heading.color,"font-size":styleObject.heading.fontSize+" !important", "font-family":styleObject.heading.fontFamily, "font-weight":styleObject.heading.fontWeight, "max-width":headingWidth}'
      v-text="data.heading"
    ></span
    ><span
    style="
    color: #757575;
    font-weight: 400;
    font-size: 12px;
    font-family: 'Roboto',sans-serif;"
      :style='{"color":styleObject.sideHeading.color,"font-size":styleObject.sideHeading.fontSize+" !important", "font-family":styleObject.sideHeading.fontFamily, "font-weight":styleObject.sideHeading.fontWeight,"min-width":sideHeadingWidth}'
      v-text="data.date"
    ></span></div
  ><div
  class="StandardmessageDescription"
  style="
    color: rgb(0, 0, 0);
    font-size: 16px !important;
    font-family: Roboto;
    font-weight: 400;
    padding: 4px 16px;
  "
    :style='{"color":styleObject.description.color,"font-size":styleObject.description.fontSize+" !important", "font-family":styleObject.description.fontFamily, "font-weight":styleObject.description.fontWeight}'
    v-text="data.desc"
  >
  </div
  ><div class="StandardmessageCategory" style="
  padding: 8px 16px;
  display: flex;
  width: fit-content;
  color: #757575;
  font-weight: 400;
  font-size: 12px;
  font-family: 'Roboto',sans-serif;"
  >
    <div class="StandardmessageGenre" v-if="!rendergenrestyles">
      <span
      style="
        color: #757575;
        font-weight: 400;
        font-size: 12px;
        font-family: 'Roboto',sans-serif;"
        :style='{"color":styleObject.category.color,"font-size":styleObject.category.fontSize+" !important", "font-family":styleObject.category.fontFamily,  "font-weight":styleObject.category.fontWeight}'
        v-text="data.categoryText"
      ></span>
    </div>
    <div
      class="StandardmessageGenre"
      v-else-if="rendergenrestyles"
      :style='{"background":genrestyles.backgroundColor,"padding":genrestyles.padding, "border-radius":genrestyles.borderRadius,  "border":genrestyles.border}'
    >
      <span
      style="
        color: #757575;
        font-weight: 400;
        font-size: 12px;
        font-family: 'Roboto',sans-serif;"
        :style='{"color":genrestyles.color,"font-size":genrestyles.fontSize+" !important", "font-family":genrestyles.fontFamily,  "font-weight":genrestyles.fontWeight}'
        v-text="data.categoryText"
      ></span>
    </div> </div
  ><span class="Ripple" >
      <span class="Rip" style="width: 592px; height: 592px; transform: translate(-51px, -213.594px) scale3d(1, 1, 1);" ></span>
    </span></div
>`,
props:["data","styles","genrestyles","rendergenrestyles","showmessagehover"],
          created() {
            this.getWalkthroughData()
           
          },
        data:function(){
            return {
                    styleObject:this.styleInit(),
        headingWidth:this.getHeadingWidth(),
        sideHeadingWidth:this.getSideHeadingWidth(),
        hover : false
            }
        },
        methods:{
          getWalkthroughData(){
          this.$emit('loadwalkthroughflow', this.data.component.flowID);
            },
         // },
            styleInit:function(){
                    return this.styles;
            },
    getHeadingWidth:function(){
        if(this.data.date.length > 0)
        {
            return "80%";
        }
        else
        {
            return "100%";
        }
        return "80%";
    },
    getSideHeadingWidth:function(){
        if(this.data.date.length > 0)
                    {
                            return "20%";
                    }
                    else
                    {
                            return "0%";
                    }
                    return "20%";
    },
    getBackgroundColor:function(){
                     if(this.showmessagehover && this.hover )
                      {
               return this.styleObject.hover.hoverColor;
           }
                    else
                    {
                              return this.styleObject.background.backgroundColor;
                    }
            }
        }
};
//$Id$
var newbie_templates = {
  template: `<div
  class="OptionmessageContainer MessageTemplate"
  style="
    background-color: white;
    border: 1px solid rgb(218, 218, 218) !important;
    border-radius: 5px;
    margin: 15px;
    width: calc(100vw - 30px);
    overflow-wrap: break-word;
  "
  :style='{"background-color":getBackgroundColor(),"border":styleObject.background.border + " !important"}'
  @mouseover="hover = true "
  @mouseleave="hover = false "
>
  <div
    class="OptionmessageHeader"
    style="
      width: 100%;
      word-break: break-word;
      border-top-left-radius: inherit;
      border-top-right-radius: inherit;
      color: #757575 !important;
      align-items: center;
      display: inline-flex;
      justify-content:space-between;
      padding: 8px;
      padding-left: 16px !important;
      padding-right: 16px !important;
      font-size: 12px !important;
      font-weight: 400;
      font-family: 'Roboto',sans-serif;
      max-width: 100%;
      word-break: break-word;
    "
  >
    <span
    style="
    color: #757575;
    font-weight: 400;
    font-size: 12px;
    font-family: 'Roboto',sans-serif;"
      :style='{"color":styleObject.heading.color,"font-size":styleObject.heading.fontSize +" !important", "font-family":styleObject.heading.fontFamily, "font-weight":styleObject.heading.fontWeight, "max-width":headingWidth}'
      v-text="data.heading"
    ></span>
    <span
    style="
    color: #757575;
    font-weight: 400;
    font-size: 12px;
    font-family: 'Roboto',sans-serif;"
      :style='{"color":styleObject.sideHeading.color,"font-size":styleObject.sideHeading.fontSize +" !important", "font-family":styleObject.sideHeading.fontFamily, "font-weight":styleObject.sideHeading.fontWeight,"min-width":sideHeadingWidth}'
      v-text="data.date"
    ></span>
  </div>
  <div
    class="OptionmessageDescription"
    style="
      padding: 16px;
      width: 100%;
      padding-top: 4px !important;
      padding-bottom: 4px !important;
      font-size: 16px !important;
      color: rgb(0, 0, 0);
      font-size: 16px !important;
      font-family: 'Roboto',sans-serif;
      font-weight: 400;
    "
  >
    <div
       style="
       color: rgb(0, 0, 0);
       font-size: 16px !important;
       font-family: 'Roboto',sans-serif;
       font-weight: 400;
       "
      :style='{"color":styleObject.description.color,"font-size":styleObject.description.fontSize +" !important", "font-family":styleObject.description.fontFamily, "font-weight":styleObject.description.fontWeight}'
      v-text="data.desc"
    ></div>
  </div>
  <combobox :data='data' :styleObject='styleObject' @sendclicked='$emit("clicked",data)'></combobox>
  <div
    class="OptionmessageCategory" style="color: #757575 !important; caret-color: #757575 !important; align-items: center; display: flex; padding: 20px 16px; padding-bottom:8px; width: fit-content; font-size: 12px !important; font-weight: 400; font-family: 'Roboto',sans-serif;"
  >
    <div class="OptionmessageGenre" v-if="!rendergenrestyles">
      <span
      style="
      color: #757575;
      font-weight: 400;
      font-size: 12px;
      font-family: 'Roboto',sans-serif;"
        :style='{"color":styleObject.category.color,"font-size":styleObject.category.fontSize +" !important", "font-family":styleObject.category.fontFamily,  "font-weight":styleObject.category.fontWeight}'
        v-text="data.categoryText"
      >
      </span>
    </div>
    <div
      class="OptionmessageGenre"
      v-else-if="rendergenrestyles"
      :style='{"background":genrestyles.backgroundColor,"padding":genrestyles.padding, "border-radius":genrestyles.borderRadius,  "border":genrestyles.border}'
    >
      <span
      style="
      color: #757575;
      font-weight: 400;
      font-size: 12px;
      font-family: 'Roboto',sans-serif;"
        :style='{"color":genrestyles.color,"font-size":genrestyles.fontSize +" !important", "font-family":genrestyles.fontFamily,  "font-weight":genrestyles.fontWeight}'
        v-text="data.categoryText"
      >
      </span>
    </div>
  </div>
</div>`,
  props: [
    "data",
    "styles",
    "genrestyles",
    "rendergenrestyles",
    "showmessagehover"
  ],
  data: function () {
    return {
      headingWidth: this.getHeadingWidth(),
      sideHeadingWidth: this.getSideHeadingWidth(),
      styleObject: this.styleInit()
    };
  },
  methods: {
    styleInit: function () {
      return this.styles;
    },
    getHeadingWidth: function () {
      if (this.data.date.length > 0) {
        return "80%";
      } else {
        return "100%";
      }
      return "80%";
    },
    getSideHeadingWidth: function () {
      if (this.data.date.length > 0) {
        return "20%";
      } else {
        return "0%";
      }
      return "20%";
    },
    getBackgroundColor: function () {
      if (this.showmessagehover && this.hover) {
        return this.styleObject.hover.hoverColor;
      } else {
        return this.styleObject.background.backgroundColor;
      }
    }
  }
};

//$Id$
var primary_panel = {
  template: `<div id="Primarypanel" style="position: relative;background-color:#fafafa;height: 100%" :style='{"background-color":styleObject.messagepanel.backgroundColor,"font-family":styleObject.messagepanel.fontFamily}' :key="styleUpdate">
<div
 v-if="currentpanel=='mainpanel'"
 id="Mainpanel"
 :style='{"background-color":styleObject.home.background.color}'
 :key="styleUpdate"
>
 <div
   class="MainpanelTopband"
   :style='{"background-color":styleObject.home.topband.backgroundColor,"color":styleObject.home.topband.color,"font-size":styleObject.home.topband.fontSize+" !important", "font-family":styleObject.home.topband.fontFamily, "font-weight":styleObject.home.topband.fontWeight, "z-index":styleObject.home.topband.zIndex, "box-shadow":styleObject.home.topband.boxShadow, "border-left":styleObject.home.topband.borderLeft, "border-right":styleObject.home.topband.borderRight, "border-top":styleObject.home.topband.borderTop, "border-bottom":styleObject.home.topband.borderBottom}'
 >
   <div
   class="TopbandElements"
   >
     <div
       class="TopbandText"
       
     >
       {{styleObject.home.topband.text}}
     </div>
     <button
       class="TopbandClose Rip"
       @click="closeWin"
       :style='{"display":styleObject.home.closeButton.display}'
      
     >
       <span
         class="material-icons"
         :style='{"color":styleObject.home.closeButton.iconColor}'
         >{{styleObject.home.closeButton.icon}}</span
       >
     </button>
   </div>
 </div>
 <div
   :style='{"background-color":styleObject.home.background.color,"position":filteredItems.length !=0?"relative" : "","height":filteredItems.length !=0?"100vh":"100%"}'
   id="MainpanelBody"
   
 >
   <div
     v-if="filteredItems.length!==0"
 class='Genreselectbox'        
   >
     <div
       id="GenreselectionContainer"
       :style='{"background-color":styleObject.home.genreSelect.selection.backgroundColor,"border":styleObject.home.genreSelect.selection.border,"border-radius":styleObject.home.genreSelect.selection.borderRadius}'
     >
       <div id="Showgenreselect" @click="selectboxshow=true,$refs.gen.focus()">
         <span :style='{"color":styleObject.home.genreSelect.selection.color,"font-size":styleObject.home.genreSelect.selection.fontSize+" !important", "font-family":styleObject.home.genreSelect.selection.fontFamily, "font-weight":styleObject.home.genreSelect.selection.fontWeight}'>{{selectedFilter}}</span
         ><span class="material-icons">arrow_drop_down</span>
       </div>
       <div id="GenreselectoptionContainer" v-show="selectboxshow"  tabindex="0" ref="gen" @mouseleave="selectboxshow=false" >
         <div
           v-for="item in compFilters"
       :key="item"
           class="GenreselectionOptions rip"
           @click="selectedFilter=item,selectboxshow=false"
           
         >
           <span
             class="material-icons"
             :tickcolor="item==selectedFilter?'black':'white'"
             id="GenreitemsIcon"
             >done</span
           >
           <span class="GenreitemsText" :style='{"color":styleObject.home.genreSelect.item.color,"font-size":styleObject.home.genreSelect.item.fontSize+" !important", "font-family":styleObject.home.genreSelect.item.fontFamily, "font-weight":styleObject.home.genreSelect.item.fontWeight}'>{{item}}</span>
         </div>
       </div>
     </div>
   </div>
   <div
     v-if="filteredItems.length!==0"
     class="MainpanelMessages"
   >
     <component
       v-for="(item, index) in filteredItems"
       v-show="componentExists(item.component.component)"
       @clicked="openWin"
       @start-tour="startTour"
       @loadwalkthroughflow="loadwalkthroughflow"
       :showmessagehover='styleObject.messageStyles[item.component.component+"-styles"].hover.showHover'
       :is="item.component.component"
       :data="item"
       :styles='styleObject.messageStyles[item.component.component+"-styles"]'
       :genrestyles="stylesForGenre(styleObject.genreStyles.default,styleObject.genreStyles[item.category], item.category)"
       :rendergenrestyles="styleObject.genreStyles['renderGenreStyles']"
       :key="index"
     ></component>
     <div
       v-if="( ( styleObject.home.historyButton.showDynamicHistory && filteredOldItems.length != 0) || (!styleObject.home.historyButton.showDynamicHistory) )  "
       id="MainpanelSeeHistory"
     >
       <button
         id="Historytab"
     class="Rip"
         :style='{"color":styleObject.home.historyButton.withNotification.color,"font-size":styleObject.home.historyButton.withNotification.fontSize+" !important", "font-family":styleObject.home.historyButton.withNotification.fontFamily, "font-weight":styleObject.home.historyButton.withNotification.fontWeight}'
         @click="currentpanel='historypanel'"
       >
       <div 
       class="Notifymessage" :style='{"color":styleObject.home.historyButton.withNotification.color,"font-size":styleObject.home.historyButton.withNotification.fontSize+" !important", "font-family":styleObject.home.historyButton.withNotification.fontFamily, "font-weight":styleObject.home.historyButton.withNotification.fontWeight}'>
         {{styleObject.home.historyButton.withNotification.text}}
       </div>
         <span
           class="material-icons"
           :style='{"color":styleObject.home.historyButton.withNotification.iconColor}'
           >{{styleObject.home.historyButton.withNotification.icon}}</span
         >
        
       </button>
     </div>
   </div>
   <div
     id="EmptyMainpanel"
     v-else
   >
     <div
     id="NodataIcon"
     style="font-size: 60px">
       <span
         class="material-icons"
         :style='{"color":styleObject.home.descriptionText.noDataDescription.iconColor+" !important"}'
       >
         {{styleObject.home.descriptionText.noDataDescription.icon}}
       </span>
     </div>
     <div 
       id="NodataText"
       :style='{"color":styleObject.home.descriptionText.noDataDescription.heading.color,"font-size":styleObject.home.descriptionText.noDataDescription.heading.fontSize+" !important", "font-family":styleObject.home.descriptionText.noDataDescription.heading.fontFamily, "font-weight":styleObject.home.historyButton.withNotification.fontWeight}'
     >
       {{styleObject.home.descriptionText.noDataDescription.heading.text}}
     </div>
     <div
     id="NodataDescription"
       style="padding: 8px !important; font-weight: 400; text-align: center"
       :style='{"color":styleObject.home.descriptionText.noDataDescription.description.color,"font-size":styleObject.home.descriptionText.noDataDescription.description.fontSize+" !important", "font-family":styleObject.home.descriptionText.noDataDescription.description.fontFamily, "font-weight":styleObject.home.descriptionText.noDataDescription.description.fontWeight}'
     >
       {{styleObject.home.descriptionText.noDataDescription.description.text}}
     </div>
     <div
       v-if="( ( styleObject.home.historyButton.showDynamicHistory && filteredOldItems.length != 0) || (!styleObject.home.historyButton.showDynamicHistory) ) "
       id="MainpanelhistorybuttonContainer"
     >
       <button
         @click="currentpanel='historypanel';"
         id="MainpanelhistoryButton"
         :style='{"background-color":styleObject.home.historyButton.withNoNotification.buttonColor,"color":styleObject.home.historyButton.withNoNotification.color,"font-size":styleObject.home.historyButton.withNoNotification.fontSize+" !important", "font-family":styleObject.home.historyButton.withNoNotification.fontFamily, "font-weight":styleObject.home.historyButton.withNoNotification.fontWeight}'
       >
         {{styleObject.home.historyButton.withNoNotification.text}}
       </button>
     </div>
   </div>
 </div>
</div>
<div v-if="currentpanel!='mainpanel'"  id="Historypanel" style="display: flex; flex-direction: column; height: 100%" :style='{"background-color":styleObject.history.background.color}'>
 <div
   class="HistorypanelTopbandContainer"
   :style='{"background-color":styleObject.history.topband.backgroundColor,"z-index":styleObject.history.topband.zIndex,"color":styleObject.history.topband.color,"font-size":styleObject.history.topband.fontSize+" !important", "font-family":styleObject.history.topband.fontFamily, "font-weight":styleObject.history.topband.fontWeight, "box-shadow":styleObject.history.topband.boxShadow, "border-left":styleObject.history.topband.borderLeft, "border-right":styleObject.history.topband.borderRight, "border-top":styleObject.history.topband.borderTop, "border-bottom":styleObject.history.topband.borderBottom}'
 >
   <div
     class="TopbandElements"
   >
     <button
       id="Historybackicon"
   class="Rip"
       @click="currentpanel='mainpanel'"
     >
       <span
         class="material-icons"
         :style='{"color":styleObject.history.backButton.iconColor}'
         >{{styleObject.history.backButton.icon}}</span
       >
     </button>
     <div
      class="Historytopband"
     >
       <div
       class="TopbandText"
       >
         {{styleObject.history.topband.text}}
       </div>
         <button
         class="TopbandClose Rip"
           @click="closeWin"
           :style='{"display":styleObject.history.closeButton.display}'
      
         >
           <span
             class="material-icons"
             :style='{"color":styleObject.history.closeButton.iconColor}'
             >{{styleObject.history.closeButton.icon}}</span
           >
         </button>
     </div>
   </div>
 </div>
 <div
   :style='{"background-color":styleObject.history.background.color,"position":filteredOldItems.length !=0?"relative" : ""}'
   id="HistorypanelBody"
 >
   <div
     v-if="filteredOldItems.length!==0"
 id="HistorypanelBodyMessages"
   >
      <component
       v-show="componentExists(item.component.component)"
       @clicked="openWin"
       @loadwalkthroughflow="loadwalkthroughflow"
       @start-tour="startTour"
       v-for="(item, index) in filteredOldItems"
       :showmessagehover='styleObject.messageStyles[item.component.component+"-styles"].hover.showHover'
       :is="item.component.component"
       :data="item"
       :styles='styleObject.messageStyles[item.component.component+"-styles"]'
       :genrestyles="stylesForGenre(styleObject.genreStyles.default,styleObject.genreStyles[item.category],item.category)"
       :rendergenrestyles="styleObject.genreStyles['renderGenreStyles']"
       :key="index+item"
     ></component> 
   </div>
   <div
     v-else
     class="NoHistoryMessage"
     :style='{"color":styleObject.history.descriptionText.noDataDescription.color + " !important","font-size":styleObject.history.descriptionText.noDataDescription.fontSize+" !important", "font-family":styleObject.history.descriptionText.noDataDescription.fontFamily, "font-weight":styleObject.history.descriptionText.noDataDescription.fontWeight}'
     >
     {{styleObject.history.descriptionText.noDataDescription.text}}
   </div>
 </div>
</div>
</div>
`,
props: [
  "items",
  "old-items",
  "reset",
  "styles",
  "newpids",
  "notclickedpids",
  "stylereset",
  "reference"
],
data: function () {
  return {
    currentpanel: "mainpanel",
    filters: [],
    filterItems: [],
    selectedFilter: "",
    validItems: [],
    validOldItems: [],
    styleObject: this.styleInit(),
    defaultGenreTexts: {},
    selectboxshow: false,
    styleUpdate:0
  };
},
watch: {
  reset: function (reset) {
    if (reset) {
      this.currentpanel = "mainpanel";
      this.$emit("reset-success");
    }
  },
  stylereset: function (stylereset) {
    if (stylereset) {
  this.styleUpdate+=1;
      this.styleObject = this.getStyles();
      this.$emit("styles-updated");
    }
  },
  newpids: function (newPids) {
    this.styleObject.home.topband.zIndex = 101;
    var pidsValid = this.validPidsCount(newPids, this.notclickedpids);
    this.$emit("pids-valid", pidsValid);
  },
  notclickedpids: function (notclickedpids) {
    var pidsValid = this.validPidsCount(this.newpids, notclickedpids);
    this.$emit("pids-valid", pidsValid);
  }
},
mounted: function () {
  this.defaultGenreTexts = this.getDefaultGenreTexts();
  this.styleObject = this.getStyles();
},
computed: {
  filteredOldItems: function () {
    var handle = this;
    var finalItems = [];
    handle.oldItems.forEach(function (d) {
      if (
        handle.isMessageValid(d.component.component) &&
        handle.isCategoryValid(d.category)
      ) {
        d.categoryText = handle.styleObject.genreTexts[d.category];
        finalItems.push(d);
      }
    });
    this.validOldItems = finalItems;
    return this.validOldItems;
  },
  filteredItems: function () {
    var handle = this;
    var finalItems = [];
    handle.filterItems = [];
    handle.items.forEach(function (d) {
      if (
        handle.isMessageValid(d.component.component) &&
        handle.isCategoryValid(d.category)
      ) {
        d.categoryText = handle.styleObject.genreTexts[d.category];
        handle.filterItems.push(d);
      }
    });
    if (
      handle.selectedFilter ===
        handle.styleObject.genreTexts["All Messages"] ||
      handle.selectedFilter === ""
    ) {
      finalItems = handle.filterItems;
    } else {
      finalItems = handle.filterItems.filter(function (d) {
        var category = "";
        for (var key in handle.styleObject.genreTexts) {
          if (handle.styleObject.genreTexts[key] == handle.selectedFilter) {
            category = key;
          }
        }
        return d.category === category;
      });
    }
    handle.validItems = finalItems;
    if (handle.filterItems.length !== 0 && handle.validItems.length === 0) {
      handle.selectedFilter = handle.styleObject.genreTexts["All Messages"];
      handle.validItems = handle.filterItems;
    }
    return handle.validItems;
  },
  compFilters: function () {
    var handle = this;
    handle.filters = [];
    handle.filters.push(handle.styleObject.genreTexts["All Messages"]);
    return [
      ...new Set(
        this.filters.concat(
          this.filterItems.map(function (d) {
            return d.categoryText;
          })
        )
      )
    ];
  }
},
methods: {
  validPidsCount: function (notViewed, notClicked) {
    var handle = this;
    var pidsValid = { notViewed: [], notClicked: [] };
    pidsValid.totalMessages=handle.validItems.length + handle.validOldItems.length;
    notViewed.forEach(function (d) {
      var messageTemplateName = "";
      handle.validItems.forEach(function (e) {
        if (e.PID == d) {
          messageTemplateName = e.component.component;
        }
      });
      if (messageTemplateName != "") {
        pidsValid.notViewed.push(d);
      }
    });
    notClicked.forEach(function (d) {
      var messageTemplateName = "";
      handle.validItems.forEach(function (e) {
        if (e.PID == d) {
          messageTemplateName = e.component.component;
        }
      });
      if (messageTemplateName != "") {
        pidsValid.notClicked.push(d);
      }
    });
    return pidsValid;
  },
  loadedComponents: function () {
    var loaded = [];
    var components = this.reference._context.components;
    for (var key in components) {
      loaded.push(key);
    }

    return loaded;
  },
  componentExists: function (component) {
    var components = this.loadedComponents.call(this);
    if (components.indexOf(component) !== -1) {
      return true;
    }
    return false;
  },
  openWin: function (data) {
    this.$emit("notification-clicked", data);
  },
  startTour(data){
    this.$emit("start-tour", data);
  },
  loadwalkthroughflow(flow_id){
    this.$emit("loadwalkthroughflow", flow_id); 
  },
  closeWin: function () {
    this.currentpanel = "mainpanel";
    this.$emit("close-clicked");
  },
  getStyles: function () {
    if (this.styles.genreTexts) {
      this.styleObject = this.updateToDefaultGenreTexts(this.styleObject);
    }
    var styleObjectUpdated = this.stylesFromSdk(
      this.styleObject,
      this.styles
    );
    if (
      (styleObjectUpdated.showMessagesWithUndefinedGenreText == false ||
        styleObjectUpdated.showMessagesWithUndefinedGenreText == "false") &&
      this.styles.genreTexts
    ) {
      styleObjectUpdated.genreTexts = this.styles.genreTexts;
      if (
        styleObjectUpdated.genreTexts["All Messages"] == undefined ||
        styleObjectUpdated.genreTexts["All Messages"].length == 0
      ) {
        styleObjectUpdated.genreTexts = this.styleObject.genreTexts;
      }
    }
    this.styleObject = styleObjectUpdated;
    this.selectedFilter = this.styleObject.genreTexts["All Messages"];
    return this.styleObject;
  },
  getDefaultGenreTexts: function () {
    return this.styleObject.genreTexts;
  },
  updateToDefaultGenreTexts: function (styleJSON) {
    styleJSON.genreTexts = this.defaultGenreTexts;
    return styleJSON;
  },
  isMessageValid: function (messageTemplate) {
    if (!this.componentExists(messageTemplate)) {
      return false;
    }
    if (
      this.styleObject.messageStyles[messageTemplate + "-styles"] == undefined
    ) {
      return false;
    }
    if (
      this.styleObject.messageStyles.renderUndefinedMessageTemplates !=
        "true" &&
      this.styleObject.messageStyles.renderUndefinedMessageTemplates != true
    ) {
      if (
        this.styles.messageStyles[messageTemplate + "-styles"] == undefined
      ) {
        return false;
      }
    }
    return true;
  },
  isCategoryValid: function (category) {
    if (
      this.styleObject.genreTexts[category] != undefined &&
      this.styleObject.genreTexts[category].length > 0
    ) {
      return true;
    }
    if(this.styleObject.showMessagesWithUndefinedGenreText === true || this.styleObject.showMessagesWithUndefinedGenreText === 'true'){
      this.styleObject.genreTexts[category]=category;
      return true;
      }
    return false;
  },
  stylesForGenre: function (defaultStyles, genreStyles, category) {
    if (genreStyles == undefined) {
      return defaultStyles;
    }
    return this.stylesFromSdk(defaultStyles, genreStyles);
  },
  stylesFromSdk: function (defaultStyles, sdkStyles) {
    var updatedStyles = JSON.parse(JSON.stringify(defaultStyles));
    for (var key in sdkStyles) {
      var sdkStyle_key = sdkStyles[key];
      var defaultStyle_key = defaultStyles ? defaultStyles[key] : {};
      if (sdkStyle_key != null) {
        if (
          typeof defaultStyle_key == "object" &&
          typeof sdkStyle_key == "object"
        ) {
          updatedStyles[key] = this.stylesFromSdk(
            defaultStyle_key,
            sdkStyle_key
          );
        } else {
          updatedStyles[key] = sdkStyle_key;
        }
      }
    }
    return updatedStyles;
  },
  styleInit: function () {
    var styleObject = {
  messagepanel:{
      backgroundColor:"#fafafa",
      fontFamily: "Roboto,Times New Roman"
  },
      home: {
      topband: {
          backgroundColor: "#488fef",
          text: "Notification",
          color: "#ffffff",
          fontSize: "20px",
          fontFamily: "Roboto,Times New Roman",
          fontWeight: "",
          zIndex: 100,
          boxShadow:
            "0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)",
          borderLeft: "",
          borderRight: "",
          borderTop: "",
          borderBottom: ""
        },
        closeButton: {
          display: "block",
          icon: "close", //MaterialIcon
          iconColor: "#ffffff"
        },
        historyButton: {
          showDynamicHistory: false,
          withNotification: {
            text: "See history",
            color: "grey",
            fontSize: "14px",
            fontFamily: "Roboto",
            fontWeight: "",
            icon: "arrow_forward", //MaterialIcon
            iconColor: "grey"
          },
          withNoNotification: {
            text: "See Notification History",
            color: "#ffffff",
            fontSize: "14px",
            fontFamily: "Roboto",
            fontWeight: "",
            buttonColor: "#488fef"
          }
        },
        background: {
          color: "#fafafa"
        },
        genreSelect: {
          selection: {
            backgroundColor: "#f3f3f3",
            color: "black",
            fontSize: "16px",
            fontFamily: "Roboto",
            fontWeight: "",
            border: "none",
        borderRadius:"none"
          },
          item: {
            color: "black",
            fontSize: "13px",
            fontFamily: "Roboto",
            fontWeight: ""
          }
        },
        descriptionText: {
          noDataDescription: {
            icon: "message", //MaterialIcon
            iconColor: "grey",
            heading: {
              text: "You don't have any notification",
              color: "grey",
              fontSize: "16px",
              fontFamily: "Roboto",
              fontWeight: ""
            },
            description: {
              text: "You will see notifications from projects you work on appear here",
              color: "grey",
              fontSize: "12px",
              fontFamily: "Roboto",
              fontWeight: ""
            }
          }
        }
      },
      history: {
        topband: {
          backgroundColor: "#757575",
          text: "History",
          color: "#ffffff",
          fontSize: "20px",
          fontFamily: "Roboto",
          fontWeight: "",
      zIndex: 100,
          boxShadow:
            "0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)",
          borderLeft: "",
          borderRight: "",
          borderTop: "",
          borderBottom: ""
        },
        backButton: {
          icon: "arrow_back",
          iconColor: "#ffffff"
        },
        closeButton: {
          display: "block",
          icon: "close",
          iconColor: "#ffffff"
        },
        background: {
          color: "#fafafa"
        },
        descriptionText: {
          noDataDescription: {
            text: "You don't have any notification",
            color: "black",
            fontSize: "14px",
            fontFamily: "Roboto",
            fontWeight: ""
          }
        }
      },
      showMessagesWithUndefinedGenreText: true,
      genreTexts: {
        "All Messages": "All Messages",
        "User Education": "User Education",
        "Webinars": "Webinars",
        "Events": "Events",
        "Feature Releases": "Feature Releases",
        "Announcements": "Announcements",
        "Community": "Community",
        "Retention": "Retention",
    "Tips and Tricks":"Tips and Tricks",
    "Survey":"Survey",
    "Enhancements":"Enhancements"
      },
      genreStyles: {
        renderGenreStyles: false,
        default: {
          color: "#ff0000",
          fontSize: "12px",
          fontFamily: "Roboto",
          fontWeight: "",
          backgroundColor: "#ffecd5",
          padding: "4px 8px",
          borderRadius: "4px",
          border: "none"
        }
      },
      messageStyles: {
        renderUndefinedMessageTemplates: "true",
        "walkthrough-message-template-default-styles": {
          heading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          sideHeading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          description: {
            color: "#000000",
            fontSize: "16px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          category: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: "",
            padding: "0px 0px",
            backgroundColor: "#ffffff",
            borderRadius: "0px"
          },
          background: {
            backgroundColor: "#ffffff",
            border: "1px solid #dadada"
          },
          hover: {
            showHover: true,
            hoverColor: "#e1e4e6"
          },
          button:{
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: "",
            padding: "0px 0px",
            backgroundColor: "#ffffff",
            borderRadius: "0px"
          }
        },
        "message-template-default-styles": {
          heading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          sideHeading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          description: {
            color: "#000000",
            fontSize: "16px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          category: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: "",
            padding: "0px 0px",
            backgroundColor: "#ffffff",
            borderRadius: "0px"
          },
          background: {
            backgroundColor: "#ffffff",
            border: "1px solid #dadada"
          },
          hover: {
            showHover: true,
            hoverColor: "#e1e4e6"
          }
        },
        "message-template-options-styles": {
          heading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          sideHeading: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          description: {
            color: "#000000",
            fontSize: "16px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          category: {
            color: "#000000",
            fontSize: "12px",
            fontFamily: "Roboto",
            fontWeight: ""
          },
          selectBox: {
            backgroundColor: "#ffffff",
            placeHolder: {
              text: "Choose your option",
              color: "#000",
              fontSize: "14px",
              fontFamily: "Roboto",
              fontWeight: ""
            },
            selection: {
              color: "#000000",
              fontSize: "16px",
              fontFamily: "Roboto",
              fontWeight: ""
            },
            item: {
              color: "#000000",
              fontSize: "16px",
              fontFamily: "Roboto",
              fontWeight: ""
            }
          },
          sendButton: {
            icon: "send",
            iconColor: "#488fef"
          },
          background: {
            backgroundColor: "#ffffff",
            border: "1px solid #dadada"
          },
          hover: {
            showHover: true,
            hoverColor: "#e1e4e6"
          }
        }
      }
    };
    return styleObject;
  }
}
};
//$Id$

var secondary_panel = {
	template: " <div id=\"app\"> " +
		"<v-app v-if=\"tabs==='items'\" >" +
		"<v-toolbar :style='{\"background-color\":styleObject.home.topband.backgroundColor,\"color\":styleObject.home.topband.color,\"font-size\":styleObject.home.topband.fontSize+\" !important\", \"font-family\":styleObject.home.topband.fontFamily, \"font-weight\":styleObject.home.topband.fontWeight, \"z-index\":styleObject.home.topband.zIndex, \"box-shadow\":styleObject.home.topband.boxShadow, \"border-left\":styleObject.home.topband.borderLeft, \"border-right\":styleObject.home.topband.borderRight, \"border-top\":styleObject.home.topband.borderTop, \"border-bottom\":styleObject.home.topband.borderBottom}' class=\"title\" app>{{styleObject.home.topband.text}} <v-spacer></v-spacer>  <v-toolbar-items> <v-btn @click=\"closeWin\"  icon><v-icon :style='{\"color\":styleObject.home.closeButton.iconColor}'>{{styleObject.home.closeButton.icon}}</v-icon></v-btn>  </v-toolbar-items></v-toolbar>" +
		"<v-content :style='{\"background-color\":styleObject.home.background.color,\"position\":filteredItems.length !=0?\"absolute\" : \"\"}' :class='filteredItems.length==0?\"align-center\":\"\"' style=\"height:100%;overflow:auto\">" +
		"<div v-if=\"filteredItems.length!==0\"  style=\"height:100%;\">" +
		"<component v-if=\"componentExists(item.component.component)\" @clicked=\"openWin\" v-for=\"(item, index) in filteredItems\"  :is=\"item.component.component\" :data='item' :styles='styleObject.messageStyles[item.component.component+\"-styles\"]' :key=\"index\" ></component>" +
		"<div class=\"text-xs-right\"><v-btn style=\"text-transform:none;\"  flat :style='{\"color\":styleObject.home.historyButton.withNotification.color,\"font-size\":styleObject.home.historyButton.withNotification.fontSize+\" !important\", \"font-family\":styleObject.home.historyButton.withNotification.fontFamily, \"font-weight\":styleObject.home.historyButton.withNotification.fontWeight}' @click=\"tabs='history'\">{{styleObject.home.historyButton.withNotification.text}} <v-icon :style='{\"color\":styleObject.home.historyButton.withNotification.iconColor}'>{{styleObject.home.historyButton.withNotification.icon}}</v-icon>  </v-btn></div>" +
		"</div>" +
		"<v-layout column justify-center align-center fill-height class=\"subheading  blue-grey--text text--lighten-1 text-xs-center\"  v-else>" +
		"<div> <v-icon size=\"60\" :style='{\"color\":styleObject.home.descriptionText.noDataDescription.iconColor+\" !important\"}' class=\"blue-grey--text text--lighten-1 \"> {{styleObject.home.descriptionText.noDataDescription.icon}} </v-icon> </div>" +
		"<div class=\"py-1\" :style='{\"color\":styleObject.home.descriptionText.noDataDescription.heading.color,\"font-size\":styleObject.home.descriptionText.noDataDescription.heading.fontSize+\" !important\", \"font-family\":styleObject.home.descriptionText.noDataDescription.heading.fontFamily, \"font-weight\":styleObject.home.historyButton.withNotification.fontWeight}'>{{styleObject.home.descriptionText.noDataDescription.heading.text}}</div>" +
		"<div class=\"pa-2 caption\" :style='{\"color\":styleObject.home.descriptionText.noDataDescription.description.color,\"font-size\":styleObject.home.descriptionText.noDataDescription.description.fontSize+\" !important\", \"font-family\":styleObject.home.descriptionText.noDataDescription.description.fontFamily, \"font-weight\":styleObject.home.descriptionText.noDataDescription.description.fontWeight}'>{{styleObject.home.descriptionText.noDataDescription.description.text}}</div>" +
		"<div> <v-btn @click=\"tabs='history'\"  rounded :style='{\"background-color\":styleObject.home.historyButton.withNoNotification.buttonColor,\"color\":styleObject.home.historyButton.withNoNotification.color,\"font-size\":styleObject.home.historyButton.withNoNotification.fontSize+\" !important\", \"font-family\":styleObject.home.historyButton.withNoNotification.fontFamily, \"font-weight\":styleObject.home.historyButton.withNoNotification.fontWeight}'>{{styleObject.home.historyButton.withNoNotification.text}}</v-btn>  </div>" +
		"</v-layout>" +
		"</v-content>" +
		"</v-app>" +
		"<v-app v-else>" +
		"<v-toolbar :style='{\"background-color\":styleObject.history.topband.backgroundColor,\"color\":styleObject.history.topband.color,\"font-size\":styleObject.history.topband.fontSize+\" !important\", \"font-family\":styleObject.history.topband.fontFamily, \"font-weight\":styleObject.history.topband.fontWeight, \"box-shadow\":styleObject.history.topband.boxShadow, \"border-left\":styleObject.history.topband.borderLeft, \"border-right\":styleObject.history.topband.borderRight, \"border-top\":styleObject.history.topband.borderTop, \"border-bottom\":styleObject.history.topband.borderBottom}' dark class=\"title\" app> <v-btn @click=\"tabs='items'\"  icon><v-icon :style='{\"color\":styleObject.history.backButton.iconColor}'>{{styleObject.history.backButton.icon}}</v-icon> </v-btn>{{styleObject.history.topband.text}}<v-spacer></v-spacer>  <v-toolbar-items> <v-btn @click=\"closeWin\" icon><v-icon :style='{\"color\":styleObject.history.closeButton.iconColor}'>{{styleObject.history.closeButton.icon}}</v-icon></v-btn>  </v-toolbar-items></v-toolbar>" +
		"<v-content :style='{\"background-color\":styleObject.history.background.color,\"position\":filteredOldItems.length !=0?\"absolute\" : \"\"}' style=\"height:100%;overflow:auto\">" +
		"<div v-if=\"filteredOldItems.length!==0\"  style=\"height:100%;overflow:auto;\">" +
		" <component v-if=\"componentExists(item.component.component)\" @clicked=\"openWin\" v-for=\"(item, index) in filteredOldItems\"  :is=\"item.component.component\" :data='item' :styles='styleObject.messageStyles[item.component.component+\"-styles\"]' :key=\"index\" ></component>" +
		"</div>" +
		"<v-layout  justify-center :style='{\"color\":styleObject.history.descriptionText.noDataDescription.color + \" !important\",\"font-size\":styleObject.history.descriptionText.noDataDescription.fontSize+\" !important\", \"font-family\":styleObject.history.descriptionText.noDataDescription.fontFamily, \"font-weight\":styleObject.history.descriptionText.noDataDescription.fontWeight}' fill-height class=\"subheading  blue-grey--text text--lighten-1 text-xs-centeri pt-3\"  v-else>" +
		"{{styleObject.history.descriptionText.noDataDescription.text}}" +
		"</v-layout>" +
		"</v-content>" +
		"</v-app>" +
		"</div>",
	props: ["items", "old-items", "reset", "styles", "newpids", "stylereset"],
	data: function () {
		return {
			tabs: "items",
			filters: ["All Messages"],
			filterItems: [],
			selectedFilter: "All Messages",
			validItems: [],
			validOldItems: [],
			styleObject: this.styleInit()
		}
	},
	watch: {
		'reset': function (reset) {
			if (reset) {
				this.tabs = "items";
				this.$emit('reset-success');
			}
		},
		'stylereset': function (stylereset) {
			if (stylereset) {
				this.styleObject = this.getStyles();
				this.$emit('styles-updated');
			}
		},
		'newpids': function (newPids) {
			this.styleObject.home.topband.zIndex = 101;
			var handle = this;
			var pidsValid = [];
			newPids.forEach(function (d) {
				var messageTemplateName = "";
				handle.validItems.forEach(function (e) {
					if (e.PID == d) {
						messageTemplateName = e.component.component;
					}
				});
				if (messageTemplateName != "") {
					pidsValid.push(d);
				}
			});
			this.$emit('pids-valid', pidsValid);
		}
	},
	mounted: function () {
		this.styleObject = this.getStyles();
	},
	computed: {
		filteredOldItems: function () {
			var handle = this;
			var finalItems = [];

			handle.oldItems.forEach(function (d) {
				if (handle.isMessageValid(d.component.component)) {
					finalItems.push(d);
				}
			});
			this.validOldItems = finalItems;
			return this.validOldItems;
		},
		filteredItems: function () {
			var handle = this;
			var finalItems = [];

			handle.filterItems = [];
			handle.items.forEach(function (d) {
				if (handle.isMessageValid(d.component.component)) {
					handle.filterItems.push(d);
				}
			});

			if (handle.selectedFilter === "All Messages") {
				finalItems = handle.filterItems;
			}
			else {
				finalItems = handle.filterItems.filter(function (d) { return d.category === handle.selectedFilter; });
			}

			this.validItems = finalItems;
			return this.validItems;
		},
		compFilters: function () {
			return this.filters.concat(this.filterItems.map(function (d) { return d.category; }));
		}
	},
	methods: {
		loadedComponents: function () {
			var loaded = [];
			var components = this.$options.components;
			for (var key in components) {
				loaded.push(key);
			}
			return loaded;
		},
		componentExists: function (component) {
			var components = this.loadedComponents.call(this);
			if (components.indexOf(component) !== -1) {
				return true;
			}
			return false;
		},
		openWin: function (data) {
			this.$emit('notification-clicked', data);
			if (this.validItems.length !== 0 && this.filteredItems.length === 0) {
				this.selectedFilter = "All Messages";
			}
		},
		closeWin: function () {
			this.tabs = "items";
			this.$emit('close-clicked');
		},
		getStyles: function () {
			this.styleObject = this.stylesFromSdk(this.styleObject, this.styles);
			return this.styleObject;
		},
		isMessageValid: function (messageTemplate) {

			if (!this.componentExists(messageTemplate)) {
				return false;
			}
			if (this.styleObject.messageStyles[messageTemplate + "-styles"] == undefined) {
				return false;
			}
			if (this.styleObject.messageStyles.renderUndefinedMessageTemplates != "true" && this.styleObject.messageStyles.renderUndefinedMessageTemplates != true) {
				if (this.styles.messageStyles[messageTemplate + "-styles"] == undefined) {
					return false;
				}
			}
			return true;
		},
		stylesFromSdk: function (defaultStyles, sdkStyles) {
			var updatedStyles = defaultStyles;
			for (var key in sdkStyles) {
				if (defaultStyles[key] != null && sdkStyles[key] != null) {
					if (typeof defaultStyles[key] == "object" && typeof sdkStyles[key] == "object") {
						updatedStyles[key] = this.stylesFromSdk(defaultStyles[key], sdkStyles[key]);
					}
					else {
						updatedStyles[key] = sdkStyles[key];
					}
				}
			}
			return updatedStyles;
		},
		styleInit: function () {
			var styleObject = {
				"home": {
					"topband": {
						"backgroundColor": "#488fef",
						"text": "Notification",
						"color": "#ffffff",
						"fontSize": "20px",
						"fontFamily": "Roboto,Times New Roman",
						"fontWeight": "",
						"zIndex": 100,
						"boxShadow": "0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)",
						"borderLeft": "",
						"borderRight": "",
						"borderTop": "",
						"borderBottom": ""
					},
					"closeButton": {
						"icon": "close",			//MaterialIcon
						"iconColor": "#ffffff"
					},
					"historyButton": {
						"withNotification": {
							"text": "See history",
							"color": "grey",
							"fontSize": "14px",
							"fontFamily": "Roboto",
							"fontWeight": "",
							"icon": "arrow_forward",	//MaterialIcon
							"iconColor": "grey"
						},
						"withNoNotification": {
							"text": "See Notification History",
							"color": "#ffffff",
							"fontSize": "14px",
							"fontFamily": "Roboto",
							"fontWeight": "",
							"buttonColor": "#488fef"
						}
					},
					"background": {
						"color": "#fafafa"
					},
					"genreSelect": {
						"selection": {
							"backgroundColor": "#f3f3f3",
							"color": "black",
							"fontSize": "16px",
							"fontFamily": "Roboto",
							"fontWeight": "",
							"border": "3px solid black"
						},
						"item": {
							"color": "black",
							"fontSize": "13px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						}
					},
					"descriptionText": {
						"noDataDescription": {
							"icon": "message",		//MaterialIcon
							"iconColor": "grey",
							"heading": {
								"text": "You don't have any notification",
								"color": "grey",
								"fontSize": "16px",
								"fontFamily": "Roboto",
								"fontWeight": ""
							},
							"description": {
								"text": "You will see notifications from projects you work on appear here",
								"color": "grey",
								"fontSize": "12px",
								"fontFamily": "Roboto",
								"fontWeight": ""
							}
						}
					}
				},
				"history": {
					"topband": {
						"backgroundColor": "#757575",
						"text": "History",
						"color": "#ffffff",
						"fontSize": "20px",
						"fontFamily": "Roboto",
						"fontWeight": "",
						"boxShadow": "0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)",
						"borderLeft": "",
						"borderRight": "",
						"borderTop": "",
						"borderBottom": ""
					},
					"backButton": {
						"icon": "arrow_back",
						"iconColor": "#ffffff"
					},
					"closeButton": {
						"icon": "close",
						"iconColor": "#ffffff"
					},
					"background": {
						"color": "#fafafa"
					},
					"descriptionText": {
						"noDataDescription": {
							"text": "You don't have any notification",
							"color": "black",
							"fontSize": "14px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						}
					}
				},
				"messageStyles": {
					"renderUndefinedMessageTemplates": "true",
					"message-template-default-styles": {
						"heading": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"sideHeading": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"description": {
							"color": "#000000",
							"fontSize": "16px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"category": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"background": {
							"backgroundColor": "#ffffff",
							"border": "1px solid #dadada"
						}
					},
					"message-template-options-styles": {
						"heading": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"sideHeading": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"description": {
							"color": "#000000",
							"fontSize": "16px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"category": {
							"color": "#000000",
							"fontSize": "12px",
							"fontFamily": "Roboto",
							"fontWeight": ""
						},
						"selectBox": {
							"backgroundColor": "#ffffff",
							"placeHolder": {
								"text": "Choose your option",
								"color": "#000",
								"fontSize": "14px",
								"fontFamily": "Roboto",
								"fontWeight": ""
							},
							"selection": {
								"color": "#000000",
								"fontSize": "16px",
								"fontFamily": "Roboto",
								"fontWeight": ""
							},
							"item": {
								"color": "#000000",
								"fontSize": "16px",
								"fontFamily": "Roboto",
								"fontWeight": ""
							}
						},
						"sendButton": {
							"icon": "send",
							"iconColor": "#488fef"
						},
						"background": {
							"backgroundColor": "#ffffff",
							"border": "1px solid #dadada"
						}
					}
				}
			};
			return styleObject;
		}
	}
};
/*$Id$*/
class Messageboard{
    constructor(){
    var self = this;
    this.vueObj= Vue.createApp({
    // this.app=new Vue({
    // el: '#app',
    data: function() {
    return{
      restart:false,
      reference:self.vueObj,
      focus:false,
      reset: false,
      srcCheck:true,
      styleReset: false,
      markViewed:false,
      zuid:-1,
      styles:{},
            templateName:"stacked-panel-template-default",
            allItems:[],
            items:[],
            oldItems:[],
            pid:[],
            activePid:[],
            viewedPid:[],
            oldPid:[],
      newPid:[],
      notClickedPid:[],
      newPidValid:[],
      notClickedPidValid:[],
      polling:true
         }
    },
    created:function(){
     var handle=this;
      handle.srcCheck =((document.domain).split(".")).includes("tipengine");
      window.addEventListener("message", function(event,a,b){
      switch(event.data.type)
      {
      case "init":
    handle.start(event.data.serviceID,event.data.orgID,event.data.url,event.data.panelId,event.data.panelTemplateName,event.data.styles,event.source);
         break;
      case "backdrop":
          handle.reset=true;
          handle.focus=false;
          handle.checkNreload();
              break;
      case "focus":
          handle.focus=true;
          handle.markNewPids();
          handle.markViewed = true;
             break;
      case "styleUpdate":
            handle.stylesUpdate(event.data.styles);
            break;
      case "orgUpdate":
            handle.orgUpdate(event.data.orgID);
            break;
      }
    });

    //WMS callback
            window.addEventListener("message", function (e) {
                if (e.data.emittype == "wmscallback") {
                    var self = handle;
                    setTimeout(function () {self.getData(true)},10000);
                }
                else if (e.data.emittype == "wmscallbackserver") {
                    handle.polling = !e.data.serverup;
                }
            });

        },
    methods:{
checkVersion:function(curVersion){
  if(version!==+curVersion){
        this.restart=true;
    return this.restart;
  }     
},
checkNreload:function(){
  var oldTime=localStorage.getItem("micsRestartTime")||0;
  var time=new Date().getTime()-oldTime > 60000*10;
  if(this.restart&&!this.focus&&time){
             localStorage.setItem("micsRestartTime",new Date().getTime());
      this.parentSource.postMessage({type:"reload",value:{"unviewedMessages":this.newPidValid.length,"notclickedMessages":this.notClickedPidValid.length},panelId:this.panelId},this.url);
                 location.reload();
  }
    else if(this.restart){
            setTimeout(function(){ this.checkNreload();},600000);
            return;
            }
},
start:function(serviceID,orgID,url,panelId,panelTemplateName,styles,parentSource){
    var handle=this;
    handle.serviceID=serviceID;
    handle.orgID=orgID;
    handle.url=url;
    handle.panelId=panelId;
    handle.templateName = panelTemplateName;
    if(Object.keys(styles).length==0)
        {
                styles={"emptyStyles":"placeHolder"};
        }
    handle.styles = JSON.parse(JSON.stringify(styles));
    handle.parentSource = parentSource;
    handle.init();
},
  init:function(){
          this.getData(true);
  },
  getData:function(iterate){
          var handle=this;
          
var params=new Map();
params.set("ORGID",handle.orgID);
params.set("ServiceID",handle.serviceID);
function orgSuccess(xhttp){
              if(xhttp.status>399){setTimeout(function(){ return handle.polling ? handle.getData(true) : ''},1800000)}
              var response = {};
              response.data = JSON.parse(xhttp.response);
              handle.zuid = response.data.ZUID;
              if(handle.checkVersion(response.data.version)){  handle.checkNreload(); return; }
              handle.formatPids(response);
              var unviewedPid = handle.pid.filter(function(val){ return !handle.viewedPid.includes(val) && !handle.oldPid.includes(val)});
              handle.getNotification( handle.pid.filter(function(d){ return handle.activePid.indexOf(d.toString()) < 0; }) );
              if(iterate){
                setTimeout(function(){ return handle.polling ? handle.getData(true) : ''},1800000);
              }
}
function orgError(xhttp){
    setTimeout(function(){ return handle.polling ? handle.getData(true) : ''},1800000);
}
var httpcall = new HttpCall("GET", "/Stacked",[],params,true);
if(!handle.srcCheck){
var httpcall = new HttpCall("GET", "/mics/Stacked",[],params,true);
}
httpcall.makeHttpRequest(orgSuccess,orgError);
  },
  getNotification:function(pid){
      var handle = this;
      if(pid.length===0){
          handle.formatItems();
          return;
      }
      var params=new Map();
      params.set("ORGID",handle.orgID);
      params.set("ServiceID",handle.serviceID);
      params.set("Pidentifier", pid.toString());
      function orgSuccess(xhttp){
              if(xhttp.status>399){setTimeout(function(){ return handle.getNotification(pid);},1800000);}
              var response = {};
              response.data = JSON.parse(xhttp.response);
              if(handle.checkVersion(response.data.version)){  handle.checkNreload(); return; }
              handle.allItems = response.data.notification.map(function(d){var obj=handle.decodeData(JSON.parse(d.message_json)); obj.PID=d.PID; return obj;  }).concat(handle.allItems);
              handle.activePid=response.data.notification.map(function(d){  return d.PID; }).concat(handle.activePid);
              handle.activePid=Array.from(new Set(handle.activePid));
              handle.formatItems();
     }
     function orgError(xhttp){
          setTimeout(function(){ return handle.getNotification(pid);},1800000);     
      }
      var httpcall = new HttpCall("GET", "/Stacked",[],params,true);
      if(!handle.srcCheck){
    var httpcall = new HttpCall("GET", "/mics/Stacked",[],params,true);
    }
      httpcall.makeHttpRequest(orgSuccess,orgError);
  },
  markNewPids:function(){
      var handle = this;
      handle.newPid = handle.pid.filter(function(val){return !handle.viewedPid.includes(val) && !handle.oldPid.includes(val)});
      handle.notClickedPid= handle.pid.filter(function(val){return !handle.oldPid.includes(val)});
  },
  validNewPids:function(validPids){
      var handle = this;
      handle.newPidValid = validPids.notViewed;
      handle.notClickedPidValid = validPids.notClicked;
      var TotalMessages=validPids.totalMessages;
      if(handle.markViewed)
      {
          handle.viewedWin();
          handle.markViewed = false;
      }
      else
      {
          handle.parentSource.postMessage({type:"notification",value:{"unviewedMessages":handle.newPidValid.length,"notclickedMessages":handle.notClickedPidValid.length,"totalMessages":TotalMessages},panelId:handle.panelId},handle.url);
      }
  },
  viewedWin:function(){
      var handle=this;
              if(handle.newPidValid.length > 0)
              {
                      handle.feedbackOpen({"PID":handle.newPidValid.join()},'2');
              }
      handle.newPidValid.forEach(function(d){
          handle.viewedPid.push(d);
      });
      handle.newPid = [];
  },
  feedbackOpen:function(data,feedbackID){
          var params=new Map();
          params.set("ORGID",this.orgID);
          params.set("ServiceID",this.serviceID);
          params.set("Feedback", feedbackID);
          params.set("Pidentifier", data.PID);
          function orgSuccess(xhttp){}
          function orgError(xhttp){}
          var httpcall = new HttpCall("POST", "/Stacked",[],params,true);
      if(!this.srcCheck){
         var httpcall = new HttpCall("POST", "/mics/Stacked",[],params,true);
        }
 
          httpcall.makeHttpRequest(orgSuccess,orgError);
      },
  openWin:function(data){
              var handle = this;
              var newData = handle.formatClickData(data);
              handle.parentSource.postMessage({type:"open",value:newData,panelId:handle.panelId},handle.url);
              handle.feedbackOpen(data,'3');
              handle.oldPid.push(data.PID);
              handle.notClickedPid = handle.notClickedPid.filter(function(val){return data.PID != val});
              handle.items = handle.allItems.filter(function(d){ return handle.pid.includes(d.PID) && !handle.oldPid.includes(d.PID)});
              handle.oldItems = handle.allItems.filter(function(d){ return handle.oldPid.includes(d.PID)});
      },
    loadwalkthroughflow(flowid){
        var handle = this;
        handle.parentSource.postMessage({type:"loadwalkthroughflow",flowID:flowid,panelId:handle.panelId},handle.url)
      },
   startTour:function(data){
        var handle = this;
        var newData = handle.formatClickData(data);
        handle.parentSource.postMessage({type:"start-tour",value:newData,PID:data.PID,panelId:handle.panelId},handle.url);
        handle.feedbackOpen(data,'3');
        handle.oldPid.push(data.PID);
        handle.notClickedPid = handle.notClickedPid.filter(function(val){return data.PID != val});
        handle.items = handle.allItems.filter(function(d){ return handle.pid.includes(d.PID) && !handle.oldPid.includes(d.PID)});
        handle.oldItems = handle.allItems.filter(function(d){ return handle.oldPid.includes(d.PID)});
},
  formatClickData:function(data){
                    var handle = this;
                    var newData = JSON.parse(JSON.stringify(data));
                 if(newData.selectedOption){
            var newCTA = newData.cta +"?selectedoption=" +newData.selectedOption;
            newData.cta = newCTA;
    }
                
                if(newData.sdk==true || newData.sdk=="true")
                {
                       var newCTA = newData.cta + (newData.selectedOption ? "&":"?")  + "orgID=" + handle.orgID + "&zuid=" + handle.zuid;
                        newData.cta = newCTA;
                }
                return newData;
     },
  
  closeWin:function(){
      var handle = this;
      handle.parentSource.postMessage({type:"close",panelId:handle.panelId},handle.url);
  },
  formatPids: function(response){
      var handle = this;
      var pid=response.data.message_types ? (response.data.message_types.reduce(function(acc,a,b){ if(a.active_messages_pid){ return  acc.concat(a.active_messages_pid.split(","));} else{ return ; } },[])) : [];
              pid=Array.from(new Set(pid));
              var viewedPid=response.data.message_types ? (response.data.message_types.reduce(function(acc,a,b){ if(a.viewed_messages_pid){return  acc.concat(a.viewed_messages_pid.split(","));} else {return ;} },[])) : [];
              viewedPid=Array.from(new Set(viewedPid));
              var oldPid=response.data.message_types ? (response.data.message_types.reduce(function(acc,a,b){if(a.clicked_messages_pid){return  acc.concat(a.clicked_messages_pid.split(","));} else {return ;} },[])) : [];
              oldPid=Array.from(new Set(oldPid));
      var pidsAlreadyViewed = pid.filter(function(val){return handle.viewedPid.includes(val) && !viewedPid.includes(val) && !oldPid.includes(val)});
              var pidsAlreadyClicked = pid.filter(function(val){return handle.oldPid.includes(val) && !oldPid.includes(val)});
              if(pidsAlreadyViewed.length > 0)
              {
                      handle.feedbackOpen({"PID":pidsAlreadyViewed.join()},'2');
              }
              if(pidsAlreadyClicked.length > 0)
              {
                      handle.feedbackOpen({"PID":pidsAlreadyClicked.join()},'3');
              }
              handle.pid = pid;
              handle.viewedPid = viewedPid.concat(pidsAlreadyViewed);
              handle.oldPid = oldPid.concat(pidsAlreadyClicked);
  },
  formatItems: function(){
      var handle = this;
      handle.activePid = handle.activePid.filter(function(val){ return handle.pid.includes(val)});
      handle.allItems = handle.allItems.filter(function(d){return handle.pid.includes(d.PID)});
      handle.allItems = handle.allItems.filter((obj, index, self) => index === self.findIndex((t) => t.PID === obj.PID));
      handle.items = handle.allItems.filter(function(d){ return handle.pid.includes(d.PID) && !handle.oldPid.includes(d.PID)});
      handle.oldItems = handle.allItems.filter(function(d){ return handle.oldPid.includes(d.PID)});
      setTimeout(function(){return handle.markNewPids()},2000);
      if(handle.focus && document.visibilityState == "visible")
              {
          handle.markViewed = true;
              }
  },
  decodeData:function(data){
      var decodedData = JSON.parse(JSON.stringify(data));
      for(let key in data){    
          if(key !== "component")
          {
              decodedData[key]=decodeURI(data[key]);
          }
      }
      return decodedData;
  },
  resetFunc:function(){
      this.reset = false;
  },
  stylesUpdatedFunc:function(){
      this.styleReset = false;    
  },
  stylesUpdate: function(styleJSON){
      this.styles = JSON.parse(JSON.stringify(styleJSON));
      this.styleReset = true;
  },
  orgUpdate: function(orgID){
      this.orgID = orgID;
      this.getData(false);
  }
    }});
    this.vueObj.component('panel-template-primary',primary_panel);
    this.vueObj.component('panel-template-secondary',secondary_panel);
    this.vueObj.component('message-template-default',standard_templates);
    this.vueObj.component('message-template-blog',blog_template);
    this.vueObj.component('message-template-options',newbie_templates);
    this.vueObj.component('combobox',combobox);
    this.vueObj.mount('#app');
}
}//$Id$

var blog_template = {
  template:`<div
class="BlogmessageContainer MessageTemplate"
@click="$emit('clicked',data)"
:style='{"background-color":styleObject.background.backgroundColor,"border":styleObject.background.border + " !important"}'
><div
class="BlogmessageHeader"
><div class="BlogmessageCategory" 
>
<div class="BlogmessageGenre" v-if="!rendergenrestyles">
  <span class="GenreText"
    :style='{"color":styleObject.category.color,"font-size":styleObject.category.fontSize+" !important", "font-family":styleObject.category.fontFamily,  "font-weight":styleObject.category.fontWeight}'
    v-text="data.categoryText"
  ></span>
</div>
<div
  class="BlogmessageGenre"
  v-else-if="rendergenrestyles"
  :style='{"background":genrestyles.backgroundColor,"padding":genrestyles.padding, "border-radius":genrestyles.borderRadius,  "border":genrestyles.border}'
>
  <span class="GenreText"
    :style='{"color":genrestyles.color,"font-size":genrestyles.fontSize+" !important", "font-family":genrestyles.fontFamily,  "font-weight":genrestyles.fontWeight}'
    v-text="data.categoryText"
  ></span>
</div> </div
>
<span class="BlogmessageSideHeaderText"
    :style='{"color":styleObject.sideHeading.color,"font-size":styleObject.sideHeading.fontSize+" !important", "font-family":styleObject.sideHeading.fontFamily, "font-weight":styleObject.sideHeading.fontWeight}'
    v-text="data.date"
  ></span></div
><div
class="BlogmessageHeading"
  :style='{"color":styleObject.heading.color,"font-size":styleObject.heading.fontSize+" !important", "font-family":styleObject.heading.fontFamily, "font-weight":styleObject.heading.fontWeight}'
  v-text="data.heading"
>
</div
>
<img id="blogImage" :src="data.blogImage" alt='blog post Image' id="blogImage" />
<div id="blogContent" v-html="data.blogcontent" :style='{"color":styleObject.blogcontent.color,"font-size":styleObject.blogcontent.fontSize+" !important", "font-family":styleObject.blogcontent.fontFamily}'
id="blogContent"></div>
</div
>`,
  props:{"data":{type: Object, defalut: {}},"styles":{type: Object, defalut: {}},"genrestyles":{type: Object, defalut: {}},"rendergenrestyles":{type: Object, defalut: {}},"showmessagehover":""},
          data:function(){
              return {
                      styleObject:this.styleInit()
              }
          },
          created(){
            if(this.data.ctaType=='walkthrough'){
              this.getWalkthroughData()
            }
          },
          methods:{
              styleInit:function(){
                      return this.styles;
              },
              getWalkthroughData(){
                this.$emit('loadwalkthroughflow', this.data.cta);
                  }
          }
};
